{"version":3,"sources":["serviceWorker.js","redux/widget-reducer.js","redux/redux-store.js","components/Desktop/DesktopPage.jsx","components/Desktop/DesktopPageContainer.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","layout","x","y","w","h","i","layoutSecond","widgetReducer","state","action","type","currentLayout","widgetId","nextLayout","widget","find","filteredLayout","filter","reducers","combineReducers","desktopPage","store","createStore","__store__","ReactGridLayout","WidthProvider","RGL","DesktopPage","move","props","moveWidget","this","onLayoutChange","map","item","key","data-grid","onClick","React","PureComponent","defaultProps","isDraggable","isResizable","items","rowHeight","preventCollision","cols","DesktopPageContainer","Component","connect","dispatch","moveWidgetCreator","App","className","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bc87c07.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const MOVE_WIDGET = 'MOVE_WIDGET';\r\n\r\nconst initialState = {\r\n    layout: [\r\n        {x: 0, y: 0, w: 3, h: 3, i: '0'},\r\n        {x: 0, y: 1, w: 3, h: 3, i: '1'}\r\n    ],\r\n    layoutSecond: []\r\n};\r\n\r\nconst widgetReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case MOVE_WIDGET:\r\n            let currentLayout = action.currentLayout;\r\n            let widgetId = action.widgetId;\r\n            let nextLayout = action.nextLayout;\r\n            const widget = state[currentLayout].find(w => w.i === widgetId);\r\n            const filteredLayout = state[currentLayout].filter(w => w.i !== widgetId);\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                [currentLayout]: filteredLayout,\r\n                [nextLayout]: [...state[nextLayout], widget]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const moveWidgetCreator = (currentLayout, nextLayout, widgetId) => ({type: MOVE_WIDGET, currentLayout, nextLayout, widgetId})\r\n\r\n\r\nexport default widgetReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const MOVE_WIDGET = 'MOVE_WIDGET';\r\n//\r\n// let initialState = {\r\n//     widgets: [\r\n//         {key: \"a\"},\r\n//         {key: \"b\"}\r\n//     ]\r\n// };\r\n//\r\n// const widgetReducer = (state = initialState, action) => {\r\n//     switch (action.type) {\r\n//         case MOVE_WIDGET: {\r\n//             let moveWidget = {\r\n//                 id: 5,\r\n//                 message: action.newPostText,\r\n//                 likesCount: 0\r\n//             };\r\n//             return {\r\n//                 ...state,\r\n//                 posts: state.posts.filter(p => p.id != action.postId),\r\n//                 widgets: [...state.widgets],\r\n//                 newPostText: ''\r\n//             };\r\n//         }\r\n//\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n//\r\n//\r\n// export const sendMessageCreator = (newMessageBody) => ({type: SEND_MESSAGE, newMessageBody})\r\n// export default widgetReducer;\r\n//\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport widgetReducer from \"./widget-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    desktopPage: widgetReducer,\r\n});\r\n\r\nconst store = createStore(reducers);\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\r\nimport RGL, { WidthProvider } from \"react-grid-layout\";\r\n\r\n\r\nconst ReactGridLayout = WidthProvider(RGL);\r\n\r\nclass DesktopPage extends React.PureComponent {\r\n\r\n    static defaultProps = {\r\n        isDraggable: true,\r\n        isResizable: true,\r\n        items: 5,\r\n        rowHeight: 30,\r\n        preventCollision: false,\r\n        cols: 12\r\n    };\r\n\r\n    render() {\r\n        let state = this.props;\r\n        let layout = state.desktopPage.layout;\r\n        let layoutSecond = state.desktopPage.layoutSecond;\r\n\r\n        return (\r\n            <Tabs>\r\n                <TabList>\r\n                    <Tab>Рабочий стол 1</Tab>\r\n                    <Tab>Рабочий стол 2</Tab>\r\n                </TabList>\r\n                <TabPanel>\r\n                    <ReactGridLayout\r\n                        {...this.props}\r\n                        onLayoutChange={layout =>({layout})}\r\n                    >\r\n                        {layout.map(item => {\r\n                            return (\r\n                                <div key={item.i} data-grid={item}>\r\n                                    <button onClick={this.move('layout', 'layoutSecond', item.i)}>Переместить</button>\r\n                                    <span>{item.i}</span>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </ReactGridLayout>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    <ReactGridLayout\r\n                        {...this.props}\r\n                        onLayoutChange={layoutSecond => ({layoutSecond})}\r\n                    >\r\n                        {layoutSecond.map(item => {\r\n                            return (\r\n                                <div key={item.i} data-grid={item}>\r\n                                    <button onClick={this.move('layoutSecond', 'layout', item.i)}>Переместить</button>\r\n                                    <span>{item.i}</span>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </ReactGridLayout>\r\n                </TabPanel>\r\n            </Tabs>\r\n        )\r\n\r\n\r\n    }\r\n\r\n    move = (currentLayout, nextLayout, widgetId) => () => {\r\n        this.props.moveWidget(currentLayout, nextLayout, widgetId)\r\n    }\r\n\r\n}\r\n\r\nexport default DesktopPage;\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {moveWidgetCreator} from \"../../redux/widget-reducer\";\r\nimport DesktopPage from \"./DesktopPage\";\r\n\r\nclass DesktopPageContainer extends React.Component {\r\n\r\n     render() {\r\n        return(\r\n            <DesktopPage {...this.props} />\r\n        )\r\n     }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        desktopPage: state.desktopPage\r\n    }\r\n}\r\n\r\n let mapDispatchToProps = (dispatch) => {\r\n     return {\r\n         moveWidget: (currentLayout, nextLayout, widgetId) => {\r\n             dispatch(moveWidgetCreator(currentLayout, nextLayout, widgetId));\r\n        }\r\n     }\r\n }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DesktopPageContainer);","import React from 'react';\nimport './App.css';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport DesktopPageContainer from \"./components/Desktop/DesktopPageContainer\";\n\nconst App = (props) => {\n\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <DesktopPageContainer/>\n            </div>\n        </Provider>\n    );\n\n}\n\nexport default App;\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}